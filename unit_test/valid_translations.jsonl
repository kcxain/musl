{"CUDA":"__global__ void vectorAdd(float* a, float* b, float* c, int n) {\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i < n) c[i] = a[i] + b[i];\n}","CPP":"void vectorAdd(float* a, float* b, float* c, int n) {\n    for(int i = 0; i < n; i++) {\n        c[i] = a[i] + b[i];\n    }\n}","direction":"CUDA_TO_CPP","valid_unit_tests_inputs":["float a1[] = {1.0f, 2.0f, 3.0f}, b1[] = {4.0f, 5.0f, 6.0f}, c1[3];\nwrapper(vectorAdd, a1, b1, c1, 3);\n","float a4[] = {1.0f, 0.0f, -1.0f}, b4[] = {-1.0f, 0.0f, 1.0f}, c4[3];\nwrapper(vectorAdd, a4, b4, c4, 3);\n","float a5[] = {20.0f}, b5[] = {30.0f}, c5[1];\nwrapper(vectorAdd, a5, b5, c5, 1);\n","float a2[] = {-1.0f, -2.0f, -3.0f}, b2[] = {-4.0f, -5.0f, -6.0f}, c2[3];\nwrapper(vectorAdd, a2, b2, c2, 3);\n","float a3[] = {0.0f, 0.0f, 0.0f}, b3[] = {0.0f, 0.0f, 0.0f}, c3[3];\nwrapper(vectorAdd, a3, b3, c3, 3);\n"]}
{"CUDA":"__global__ void matrixMul(float* A, float* B, float* C, int n) {\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    if (row < n && col < n) {\n        float sum = 0.0f;\n        for (int i = 0; i < n; i++) {\n            sum += A[row * n + i] * B[i * n + col];\n        }\n        C[row * n + col] = sum;\n    }\n}","CPP":"void matrixMul(float* A, float* B, float* C, int n) {\n    for(int row = 0; row < n; row++) {\n        for(int col = 0; col < n; col++) {\n            float sum = 0.0f;\n            for(int i = 0; i < n; i++) {\n                sum += A[row * n + i] * B[i * n + col];\n            }\n            C[row * n + col] = sum;\n        }\n    }\n}","direction":"CPP_TO_CUDA","valid_unit_tests_inputs":["float A1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\nfloat B1[] = {9, 8, 7, 6, 5, 4, 3, 2, 1};\nfloat C1[9];\nwrapper(matrixMul, A1, B1, C1, 3);\n","float A4[] = {1, 2, 3, 4, 1, 2, 3, 4, 1};\nfloat B4[] = {1, 2, 3, 1, 2, 3, 1, 2, 3};\nfloat C4[9];\nwrapper(matrixMul, A4, B4, C4, 3);\n","float A5[] = {0, 0, 0, 0, 0, 0, 0, 0, 0}; // Zero matrix\nfloat B5[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\nfloat C5[9];\nwrapper(matrixMul, A5, B5, C5, 3);\n // Multiplication with zero matrix should result in zero matrix","float A2[] = {10, 20, 30, 40, 50, 60, 70, 80, 90};\nfloat B2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\nfloat C2[9];\nwrapper(matrixMul, A2, B2, C2, 3);\n","float A3[] = {1, 0, 0, 0, 1, 0, 0, 0, 1}; // Identity matrix\nfloat B3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\nfloat C3[9];\nwrapper(matrixMul, A3, B3, C3, 3);\n // Multiplication with identity matrix should result in same matrix"]}
